- name: Write registered variable and another variable to separate columns in a CSV file
  hosts: localhost
  tasks:
    - name: Run a command to get some output (example task)
      command: echo "value_from_command"
      register: X

    - name: Define another variable
      set_fact:
        var2: "value2"

    - name: Write data to CSV file using template
      template:
        src: data.csv.j2
        dest: /path/to/yourfile.csv
        mode: '0644'
      vars:
        var1: "{{ X.stdout }}"
        var2: "{{ var2 }}"

apiVersion: v1
kind: ConfigMap
metadata:
  name: cluster-urls-config
data:
  CENTRAL_SERVER_URL: "https://api.central.openshift.example.com:6443"
  EAST_SERVER_URL: "https://api.east.openshift.example.com:6443"

oc apply -f cluster-urls-config.yaml

apiVersion: v1
kind: Secret
metadata:
  name: cluster-tokens-secret
type: Opaque
data:
  CENTRAL_TOKEN: $(echo -n "your-central-token" | base64)
  EAST_TOKEN: $(echo -n "your-east-token" | base64)

oc apply -f cluster-tokens-secret.yaml

apiVersion: v1
kind: Template
metadata:
  name: crd-comparator-app
objects:
  - apiVersion: apps/v1
    kind: Deployment
    metadata:
      name: go-backend
    spec:
      replicas: 1
      selector:
        matchLabels:
          app: go-backend
      template:
        metadata:
          labels:
            app: go-backend
        spec:
          containers:
            - name: go-backend
              image: $(REGISTRY_URL)/$(PROJECT)/go-backend:latest
              ports:
                - containerPort: 8080
              env:
                - name: CENTRAL_SERVER_URL
                  valueFrom:
                    configMapKeyRef:
                      name: cluster-urls-config
                      key: CENTRAL_SERVER_URL
                - name: EAST_SERVER_URL
                  valueFrom:
                    configMapKeyRef:
                      name: cluster-urls-config
                      key: EAST_SERVER_URL
                - name: CENTRAL_TOKEN
                  valueFrom:
                    secretKeyRef:
                      name: cluster-tokens-secret
                      key: CENTRAL_TOKEN
                - name: EAST_TOKEN
                  valueFrom:
                    secretKeyRef:
                      name: cluster-tokens-secret
                      key: EAST_TOKEN
  - apiVersion: v1
    kind: Service
    metadata:
      name: go-backend
    spec:
      ports:
        - port: 8080
          targetPort: 8080
      selector:
        app: go-backend
  - apiVersion: route.openshift.io/v1
    kind: Route
    metadata:
      name: go-backend
    spec:
      to:
        kind: Service
        name: go-backend
      port:
        targetPort: 8080
  - apiVersion: apps/v1
    kind: Deployment
    metadata:
      name: react-frontend
    spec:
      replicas: 1
      selector:
        matchLabels:
          app: react-frontend
      template:
        metadata:
          labels:
            app: react-frontend
        spec:
          containers:
            - name: react-frontend
              image: $(REGISTRY_URL)/$(PROJECT)/react-frontend:latest
              ports:
                - containerPort: 80
  - apiVersion: v1
    kind: Service
    metadata:
      name: react-frontend
    spec:
      ports:
        - port: 80
          targetPort: 80
      selector:
        app: react-frontend
  - apiVersion: route.openshift.io/v1
    kind: Route
    metadata:
      name: react-frontend
    spec:
      to:
        kind: Service
        name: react-frontend
      port:
        targetPort: 80


# Build stage
FROM registry.access.redhat.com/ubi8/go-toolset as builder

WORKDIR /app
COPY . .

# Build the Go app
RUN go mod download
RUN CGO_ENABLED=0 GOOS=linux go build -o server main.go

# Run stage with UBI Minimal
FROM registry.access.redhat.com/ubi8/ubi-minimal
WORKDIR /root/

# Copy the binary from the build stage
COPY --from=builder /app/server .

# Set environment variables (will be overridden in OpenShift)
ENV CENTRAL_SERVER_URL=""
ENV CENTRAL_TOKEN=""
ENV EAST_SERVER_URL=""
ENV EAST_TOKEN=""

# Expose the port
EXPOSE 8080

# Run the Go app
CMD ["./server"]


# Build stage
FROM registry.access.redhat.com/ubi8/nodejs-18 as builder

WORKDIR /app
COPY . .
RUN npm install
RUN npm run build

# Run stage with UBI Nginx
FROM registry.access.redhat.com/ubi8/nginx-120
COPY --from=builder /app/build /usr/share/nginx/html

# Expose the port for Nginx
EXPOSE 8080
CMD ["nginx", "-g", "daemon off;"]


oc registry login
# Go Backend
docker build -t $(oc registry info)/<project>/go-backend:latest -f Dockerfile .
docker push $(oc registry info)/<project>/go-backend:latest

# React Frontend
docker build -t $(oc registry info)/<project>/react-frontend:latest -f Dockerfile .
docker push $(oc registry info)/<project>/react-frontend:latest


# Deploy the Go backend
oc new-app $(oc registry info)/<project>/go-backend:latest \
  -e CENTRAL_SERVER_URL=https://api.central.openshift.example.com:6443 \
  -e CENTRAL_TOKEN=your-central-token \
  -e EAST_SERVER_URL=https://api.east.openshift.example.com:6443 \
  -e EAST_TOKEN=your-east-token \
  --name=go-backend

# Expose the Go backend as a service
oc expose svc/go-backend

# Deploy the React frontend
oc new-app $(oc registry info)/<project>/react-frontend:latest --name=react-frontend

# Expose the React frontend as a service
oc expose svc/react-frontend

- name: go-backend
  image: $(oc registry info)/<project>/go-backend:latest



parameters:
  - name: CENTRAL_SERVER_URL
    description: "OpenShift API server URL for the first (central) cluster"
    value: "https://api.central.openshift.example.com:6443"
  - name: CENTRAL_TOKEN
    description: "Bearer token for the first (central) cluster"
    value: "default-central-token"
  - name: EAST_SERVER_URL
    description: "OpenShift API server URL for the second (east) cluster"
    value: "https://api.east.openshift.example.com:6443"
  - name: EAST_TOKEN
    description: "Bearer token for the second (east) cluster"
    value: "default-east-token"



// main.go
package main

import (
    "encoding/json"
    "fmt"
    "log"
    "net/http"
    "os"

    "github.com/gorilla/mux"
    "k8s.io/client-go/kubernetes"
    "k8s.io/client-go/rest"
    "k8s.io/apimachinery/pkg/apis/meta/v1/unstructured"
    "k8s.io/apimachinery/pkg/runtime/schema"
)

// ClusterConfig holds cluster name and client
type ClusterConfig struct {
    Name   string
    Client *kubernetes.Clientset
}

// FetchCRDs fetches all CRDs from the given Kubernetes cluster
func FetchCRDs(client *kubernetes.Clientset) ([]unstructured.Unstructured, error) {
    gvr := schema.GroupVersionResource{Group: "apiextensions.k8s.io", Version: "v1", Resource: "customresourcedefinitions"}
    crdList, err := client.RESTClient().Get().Resource(gvr.Resource).DoRaw()
    if err != nil {
        return nil, err
    }

    var crds []unstructured.Unstructured
    json.Unmarshal(crdList, &crds)
    return crds, nil
}

// CompareCRDs compares CRDs between two clusters and highlights differences
func CompareCRDs(crdsA, crdsB []unstructured.Unstructured) []string {
    var diffs []string
    // Logic to compare CRDs and store the differences in diffs slice
    // Placeholder: Add actual comparison logic
    return diffs
}

// fetchAndCompareHandler fetches and compares CRDs from two clusters
func fetchAndCompareHandler(w http.ResponseWriter, r *http.Request) {
    clusterA := r.URL.Query().Get("clusterA")
    clusterB := r.URL.Query().Get("clusterB")

    // Fetch CRDs for both clusters
    crdsA, err := FetchCRDs(clients[clusterA])
    if err != nil {
        http.Error(w, err.Error(), http.StatusInternalServerError)
        return
    }
    crdsB, err := FetchCRDs(clients[clusterB])
    if err != nil {
        http.Error(w, err.Error(), http.StatusInternalServerError)
        return
    }

    diffs := CompareCRDs(crdsA, crdsB)

    json.NewEncoder(w).Encode(map[string]interface{}{
        "crdsA":  crdsA,
        "crdsB":  crdsB,
        "diffs":  diffs,
    })
}

// SetupClusterClient initializes a client for a given cluster token and server URL
func SetupClusterClient(serverURL, token string) (*kubernetes.Clientset, error) {
    config := &rest.Config{
        Host:        serverURL,
        BearerToken: token,
        TLSClientConfig: rest.TLSClientConfig{
            Insecure: true, // Set to false if you have certificates for secure communication
        },
    }
    clientset, err := kubernetes.NewForConfig(config)
    if err != nil {
        return nil, err
    }
    return clientset, nil
}

var clients map[string]*kubernetes.Clientset

func main() {
    clients = make(map[string]*kubernetes.Clientset)

    // Read environment variables for server URLs and tokens
    clusterConfigs := []struct {
        name      string
        serverURL string
        token     string
    }{
        {
            name:      "central",
            serverURL: os.Getenv("CENTRAL_SERVER_URL"),
            token:     os.Getenv("CENTRAL_TOKEN"),
        },
        {
            name:      "east",
            serverURL: os.Getenv("EAST_SERVER_URL"),
            token:     os.Getenv("EAST_TOKEN"),
        },
    }

    // Initialize clients for each cluster
    for _, cluster := range clusterConfigs {
        client, err := SetupClusterClient(cluster.serverURL, cluster.token)
        if err != nil {
            log.Fatalf("Failed to setup client for cluster %s: %v", cluster.name, err)
        }
        clients[cluster.name] = client
    }

    router := mux.NewRouter()
    router.HandleFunc("/api/crds/compare", fetchAndCompareHandler).Methods("GET")

    fmt.Println("Server running on port 8080")
    log.Fatal(http.ListenAndServe(":8080", router))
}

---------------------------
package main

import (
    "context"
    "encoding/json"
    "fmt"
    "log"
    "net/http"
    "os"

    "github.com/gorilla/mux"
    "k8s.io/client-go/kubernetes"
    "k8s.io/client-go/rest"
    "k8s.io/apimachinery/pkg/apis/meta/v1/unstructured"
    "k8s.io/apimachinery/pkg/runtime/schema"
)

// ClusterConfig holds cluster name and client
type ClusterConfig struct {
    Name   string
    Client *kubernetes.Clientset
}

// FetchCRDs fetches all CRDs from the given Kubernetes cluster
func FetchCRDs(client *kubernetes.Clientset) ([]unstructured.Unstructured, error) {
    gvr := schema.GroupVersionResource{Group: "apiextensions.k8s.io", Version: "v1", Resource: "customresourcedefinitions"}
    
    // Using context.TODO() to comply with the updated method signature for DoRaw
    result, err := client.RESTClient().Get().Resource(gvr.Resource).DoRaw(context.TODO())
    if err != nil {
        return nil, err
    }

    var crds []unstructured.Unstructured
    json.Unmarshal(result, &crds)
    return crds, nil
}

// CompareCRDs compares CRDs between two clusters and highlights differences
func CompareCRDs(crdsA, crdsB []unstructured.Unstructured) []string {
    var diffs []string
    // Placeholder logic to compare CRDs and store differences
    return diffs
}

// fetchAndCompareHandler fetches and compares CRDs from two clusters
func fetchAndCompareHandler(w http.ResponseWriter, r *http.Request) {
    clusterA := r.URL.Query().Get("clusterA")
    clusterB := r.URL.Query().Get("clusterB")

    crdsA, err := FetchCRDs(clients[clusterA])
    if err != nil {
        http.Error(w, fmt.Sprintf("Error fetching CRDs from cluster %s: %v", clusterA, err), http.StatusInternalServerError)
        return
    }

    crdsB, err := FetchCRDs(clients[clusterB])
    if err != nil {
        http.Error(w, fmt.Sprintf("Error fetching CRDs from cluster %s: %v", clusterB, err), http.StatusInternalServerError)
        return
    }

    diffs := CompareCRDs(crdsA, crdsB)

    json.NewEncoder(w).Encode(map[string]interface{}{
        "crdsA":  crdsA,
        "crdsB":  crdsB,
        "diffs":  diffs,
    })
}

// SetupClusterClient initializes a client for a given cluster token and server URL
func SetupClusterClient(serverURL, token string) (*kubernetes.Clientset, error) {
    config := &rest.Config{
        Host:        serverURL,
        BearerToken: token,
        TLSClientConfig: rest.TLSClientConfig{
            Insecure: true, // Set to false if you have certificates for secure communication
        },
    }
    clientset, err := kubernetes.NewForConfig(config)
    if err != nil {
        return nil, err
    }
    return clientset, nil
}

var clients map[string]*kubernetes.Clientset

func main() {
    clients = make(map[string]*kubernetes.Clientset)

    // Read environment variables for server URLs and tokens
    clusterConfigs := []struct {
        name      string
        serverURL string
        token     string
    }{
        {
            name:      "central",
            serverURL: os.Getenv("CENTRAL_SERVER_URL"),
            token:     os.Getenv("CENTRAL_TOKEN"),
        },
        {
            name:      "east",
            serverURL: os.Getenv("EAST_SERVER_URL"),
            token:     os.Getenv("EAST_TOKEN"),
        },
    }

    // Initialize clients for each cluster
    for _, cluster := range clusterConfigs {
        client, err := SetupClusterClient(cluster.serverURL, cluster.token)
        if err != nil {
            log.Fatalf("Failed to setup client for cluster %s: %v", cluster.name, err)
        }
        clients[cluster.name] = client
    }

    router := mux.NewRouter()
    router.HandleFunc("/api/crds/compare", fetchAndCompareHandler).Methods("GET")

    fmt.Println("Server running on port 8080")
    log.Fatal(http.ListenAndServe(":8080", router))
}

----------------------
npx create-react-app crd-comparator
cd crd-comparator
npm install axios
// src/App.js
import React, { useState } from 'react';
import axios from 'axios';

function App() {
    const [crdsA, setCrdsA] = useState([]);
    const [crdsB, setCrdsB] = useState([]);
    const [diffs, setDiffs] = useState([]);
    const [loading, setLoading] = useState(false);

    const fetchCRDs = async () => {
        setLoading(true);
        try {
            const response = await axios.get("http://localhost:8080/api/crds/compare", {
                params: { clusterA: "central", clusterB: "east" }
            });
            setCrdsA(response.data.crdsA);
            setCrdsB(response.data.crdsB);
            setDiffs(response.data.diffs);
        } catch (error) {
            console.error("Error fetching CRDs:", error);
        }
        setLoading(false);
    };

    return (
        <div className="App">
            <h1>CRD Comparator</h1>
            <button onClick={fetchCRDs} disabled={loading}>
                {loading ? "Loading..." : "Fetch & Compare CRDs"}
            </button>

            <h2>Cluster A (Central)</h2>
            <pre>{JSON.stringify(crdsA, null, 2)}</pre>

            <h2>Cluster B (East)</h2>
            <pre>{JSON.stringify(crdsB, null, 2)}</pre>

            <h2>Differences</h2>
            <pre>{JSON.stringify(diffs, null, 2)}</pre>
        </div>
    );
}

export default App;

