apiVersion: batch/v1
kind: Job
metadata:
  name: loki-minio-mirror
  namespace: openshift-logging
spec:
  template:
    spec:
      containers:
      - name: minio-mirror
        # Using Red Hat's MinIO image
        image: registry.redhat.io/openshift4/ose-minio-client:latest
        command: ["/bin/sh", "-c"]
        args:
        - |
          # Install MinIO client if not already available
          if ! command -v mc &> /dev/null; then
            echo "Installing MinIO client..."
            curl https://dl.min.io/client/mc/release/linux-amd64/mc -o /usr/local/bin/mc
            chmod +x /usr/local/bin/mc
          fi
          
          # Step 1: Get source bucket credentials from OpenShift
          echo "Step 1: Getting source bucket credentials from OpenShift..."
          SOURCE_ACCESS_KEY=$(cat /secrets/source/AWS_ACCESS_KEY_ID)
          SOURCE_SECRET_KEY=$(cat /secrets/source/AWS_SECRET_ACCESS_KEY)
          SOURCE_BUCKET=$(cat /secrets/source/bucket)
          
          # Step 2: Get MinIO credentials
          echo "Step 2: Setting up MinIO credentials..."
          TARGET_ACCESS_KEY=$(cat /secrets/target/AWS_ACCESS_KEY_ID)
          TARGET_SECRET_KEY=$(cat /secrets/target/AWS_SECRET_ACCESS_KEY)
          TARGET_BUCKET=$(cat /secrets/target/bucket)
          MINIO_ENDPOINT=$(cat /secrets/target/endpoint || echo "http://minio.openshift-storage.svc:9000")
          
          # Step 3: Configure MinIO client
          echo "Step 3: Configuring MinIO client..."
          mc alias set source "https://s3.openshift-storage.svc:443" "$SOURCE_ACCESS_KEY" "$SOURCE_SECRET_KEY" --insecure
          mc alias set target "$MINIO_ENDPOINT" "$TARGET_ACCESS_KEY" "$TARGET_SECRET_KEY" --insecure
          
          # Step 4: Create target bucket if it doesn't exist
          echo "Step 4: Creating target bucket if it doesn't exist..."
          mc mb target/$TARGET_BUCKET || true
          
          # Step 5: Mirror objects from source to target
          echo "Step 5: Mirroring objects from source to target..."
          echo "This may take a while depending on the amount of data..."
          
          # Mirror all objects with metadata
          mc mirror --preserve source/$SOURCE_BUCKET target/$TARGET_BUCKET
          
          # Step 6: Verify the mirroring
          echo "Step 6: Verifying the mirroring..."
          SOURCE_COUNT=$(mc ls source/$SOURCE_BUCKET | wc -l)
          TARGET_COUNT=$(mc ls target/$TARGET_BUCKET | wc -l)
          
          echo "Source bucket object count: $SOURCE_COUNT"
          echo "Target bucket object count: $TARGET_COUNT"
          
          if [ "$SOURCE_COUNT" -eq "$TARGET_COUNT" ]; then
            echo "Mirroring completed successfully. Object counts match."
          else
            echo "Warning: Object counts don't match. Some objects may not have been mirrored."
            echo "Source count: $SOURCE_COUNT, Target count: $TARGET_COUNT"
            exit 1
          fi
          
          # Step 7: Check for Loki-specific metadata
          echo "Step 7: Checking for Loki-specific metadata..."
          echo "Checking for index files..."
          INDEX_COUNT=$(mc ls source/$SOURCE_BUCKET | grep -c "index_" || true)
          echo "Found $INDEX_COUNT index files in source bucket"
          
          echo "Checking for chunk files..."
          CHUNK_COUNT=$(mc ls source/$SOURCE_BUCKET | grep -c "chunks/" || true)
          echo "Found $CHUNK_COUNT chunk files in source bucket"
          
          # Step 8: Update LokiStack configuration
          echo "Step 8: Updating LokiStack configuration..."
          
          # Create a secret for the new bucket if it doesn't exist
          cat <<EOF | oc apply -f -
apiVersion: v1
kind: Secret
metadata:
  name: loki-minio-bucket
  namespace: openshift-logging
type: Opaque
stringData:
  AWS_ACCESS_KEY_ID: $TARGET_ACCESS_KEY
  AWS_SECRET_ACCESS_KEY: $TARGET_SECRET_KEY
  bucket: $TARGET_BUCKET
EOF
          
          # Update LokiStack configuration
          oc patch lokistack instance -n openshift-logging --type=merge -p "{
            \"spec\": {
              \"storage\": {
                \"secret\": {
                  \"name\": \"loki-minio-bucket\"
                }
              }
            }
          }"
          
          # Restart Loki pods
          echo "Restarting Loki pods..."
          oc rollout restart deployment -l app.kubernetes.io/name=loki -n openshift-logging
          
          echo "Mirroring process completed successfully."
        volumeMounts:
        - name: source-secret
          mountPath: /secrets/source
        - name: target-secret
          mountPath: /secrets/target
        - name: kubeconfig
          mountPath: /root/.kube
      restartPolicy: Never
      volumes:
      - name: source-secret
        secret:
          secretName: logging-loki-odf
      - name: target-secret
        secret:
          secretName: minio-credentials
      - name: kubeconfig
        secret:
          secretName: minio-mirror-kubeconfig
  backoffLimit: 0 