(echo "From: you@example.com"; echo "To: recipient@example.com"; echo "Subject: Your Excel Report"; echo "MIME-Version: 1.0"; echo "Content-Type: multipart/mixed; boundary=\"boundary\""; echo; echo "--boundary"; echo "Content-Type: text/plain"; echo; echo "Please find the attached Excel file."; echo "--boundary"; echo "Content-Type: application/vnd.openxmlformats-officedocument.spreadsheetml.sheet; name=\"yourfile.xlsx\""; echo "Content-Disposition: attachment; filename=\"yourfile.xlsx\""; echo "Content-Transfer-Encoding: base64"; echo; base64 /path/to/yourfile.xlsx; echo "--boundary--") | 

/usr/sbin/sendmail -t


kubernetes.namespace_name:"prj-cpt-tmx-dev" AND 
kubernetes.pod_name:/cpt-fusion-tmx-viewer-.*/ AND 
message:/([0-9]+\.[0-9]+s)|([5-9][0-9]{2}\.[0-9]+ms)/
kubernetes.namespace_name:"prj-cpt-tmx-dev" AND 
kubernetes.pod_name:/cpt-fusion-tmx-viewer-.*/ AND 
message:"GET"

Aggregation and Ratio in Grafana
	1.	Set Up Queries:
	•	Query A: Use the first query for long-running requests.
	•	Query B: Use the second query for GET requests.
	2.	Add Metrics:
	•	Use the Count metric to count logs for both queries.
	3.	Transformation:
	•	Apply the Math transformation in Grafana to calculate the ratio: A / B.
Additional Notes:
	•	Ensure your Elasticsearch indices are configured to include kubernetes.namespace_name, kubernetes.pod_name, and message fields.
	•	Use Grafana’s $__interval or $__auto_interval variables in panel settings to dynamically adjust the time range.

Let me know if you need assistance setting up the queries in Grafana!


To handle errors in the `token_command` and fall back to an alternative command if the first one fails, you can use a `try-except` block in Python. This allows you to attempt the first command and, if it raises an exception (indicating an error), execute the second command. Here's how you can modify the `prometheus_query` function to include this logic:

```python
import subprocess

def prometheus_query(query_tr, nodetoverify):
    # Define the token commands
    if cluster_name == "arockxc":
        token_command_1 = "oc create token prometheus-k8s -n openshift-monitoring"
        token_command_2 = "oc sa get-token prometheus-k8s -n openshift-monitoring"
    else:
        token_command_1 = "oc sa get-token prometheus-k8s -n openshift-monitoring"
        token_command_2 = "oc create token prometheus-k8s -n openshift-monitoring"

    # Try the first token command
    try:
        token = subprocess.check_output(token_command_1.split()).decode('utf-8').strip()
    except subprocess.CalledProcessError:
        # If the first command fails, try the second command
        try:
            token = subprocess.check_output(token_command_2.split()).decode('utf-8').strip()
        except subprocess.CalledProcessError as e:
            print(f"Failed to retrieve token: {e}")
            return None

    # Command to get the first pod name
    try:
        nod_command = "oc get pods -o name -n openshift-monitoring | head -1"
        pod_name = subprocess.check_output(nod_command, shell=True).decode('utf-8').strip()
    except subprocess.CalledProcessError as e:
        print(f"Failed to retrieve pod name: {e}")
        return None

    # Continue with the rest of the function
    # ...

    return token, pod_name
```

### Explanation:

1. **Token Commands**:
   - Two token commands are defined based on the `cluster_name`.
   - `token_command_1` is the primary command, and `token_command_2` is the fallback command.

2. **Try-Except Block**:
   - The `try` block attempts to execute `token_command_1`.
   - If `token_command_1` fails (raises a `subprocess.CalledProcessError`), the `except` block catches the exception and attempts to execute `token_command_2`.

3. **Error Handling**:
   - If both commands fail, an error message is printed, and the function returns `None`.

4. **Pod Name Retrieval**:
   - The `nod_command` retrieves the name of the first pod in the `openshift-monitoring` namespace.
   - This command is also wrapped in a `try-except` block to handle potential errors.

5. **Return Values**:
   - The function returns the token and pod name if successful.

### Notes:
- Ensure that the `cluster_name` variable is defined and correctly set before calling this function.
- Adjust the commands and error handling as needed based on your specific requirements and environment.
- This approach ensures that the script is robust and can handle failures gracefully by falling back to alternative commands.

