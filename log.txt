Complete Steps: Develop, Containerize, and Deploy OAuth-Integrated App in OpenShift
Below are detailed instructions covering frontend, backend, containerization, and OpenShift deployment.

Step 1: Backend Development

We’ll use FastAPI for the backend.

Backend Directory Structure
backend/
├── app.py
├── requirements.txt
├── .env
├── Dockerfile
Backend Code: app.py
from fastapi import FastAPI, Request, Depends, HTTPException
from fastapi.responses import RedirectResponse
import requests
from authlib.integrations.starlette_client import OAuth
import os
from dotenv import load_dotenv

# Load environment variables
load_dotenv()

# Configuration
OAUTH_CLIENT_ID = os.getenv("OAUTH_CLIENT_ID")
OAUTH_CLIENT_SECRET = os.getenv("OAUTH_CLIENT_SECRET")
REDIRECT_URI = os.getenv("REDIRECT_URI")
OPENSHIFT_CLUSTER = os.getenv("OPENSHIFT_CLUSTER")

app = FastAPI()

# Configure OAuth
oauth = OAuth()
oauth.register(
    name="openshift",
    client_id=OAUTH_CLIENT_ID,
    client_secret=OAUTH_CLIENT_SECRET,
    access_token_url=f"https://{OPENSHIFT_CLUSTER}/oauth/token",
    authorize_url=f"https://{OPENSHIFT_CLUSTER}/oauth/authorize",
    client_kwargs={"scope": "user:info"},
)

# In-memory user session
user_sessions = {}

@app.get("/")
def home():
    return {"message": "Welcome to the Logs Downloader App! Please authenticate to access logs."}


@app.get("/login")
async def login(request: Request):
    # Redirect to OpenShift OAuth login
    return await oauth.openshift.authorize_redirect(request, REDIRECT_URI)


@app.get("/callback")
async def callback(request: Request):
    # Exchange the authorization code for a token
    token = await oauth.openshift.authorize_access_token(request)
    user_info = requests.get(
        f"https://{OPENSHIFT_CLUSTER}/apis/user.openshift.io/v1/users/~",
        headers={"Authorization": f"Bearer {token['access_token']}"},
    ).json()

    # Store user session
    user_sessions[user_info["metadata"]["name"]] = {"token": token, "info": user_info}
    return {"message": "Login successful", "user": user_info}


def get_current_user(request: Request):
    # Extract user session
    auth_header = request.headers.get("Authorization")
    if not auth_header:
        raise HTTPException(status_code=401, detail="Unauthorized")
    token = auth_header.split(" ")[1]

    for user, session in user_sessions.items():
        if session["token"]["access_token"] == token:
            return session["info"]
    raise HTTPException(status_code=403, detail="Forbidden")


@app.get("/logs")
def get_logs(namespace: str, pod: str, start: str, end: str, user=Depends(get_current_user)):
    # RBAC for access
    roles = user.get("groups", [])
    if "admin" not in roles and "developer" not in roles:
        raise HTTPException(status_code=403, detail="Access denied: insufficient permissions")

    # Placeholder log retrieval logic
    logs = {"namespace": namespace, "pod": pod, "start": start, "end": end}
    return {"logs": logs, "user": user["metadata"]["name"]}
Dependencies: requirements.txt
fastapi
uvicorn
requests
authlib
python-dotenv
Environment Variables: .env
OAUTH_CLIENT_ID=logs-downloader-app
OAUTH_CLIENT_SECRET=logs-downloader-secret
REDIRECT_URI=https://<your-app-route>/callback
OPENSHIFT_CLUSTER=<your-openshift-cluster>
Replace the placeholders with your actual values.

Step 2: Frontend Development

We’ll use React.js for the frontend.

Frontend Directory Structure
frontend/
├── src/
│   ├── App.js
│   ├── index.js
│   ├── components/
│       ├── LoginButton.js
│       ├── LogViewer.js
├── package.json
Frontend Code
App.js

import React, { useState } from "react";
import LoginButton from "./components/LoginButton";
import LogViewer from "./components/LogViewer";

function App() {
  const [user, setUser] = useState(null);

  return (
    <div>
      <h1>Logs Downloader App</h1>
      {!user ? (
        <LoginButton setUser={setUser} />
      ) : (
        <LogViewer user={user} />
      )}
    </div>
  );
}

export default App;
LoginButton.js

import React from "react";

function LoginButton({ setUser }) {
  const login = () => {
    window.location.href = "/login";
  };

  return <button onClick={login}>Login</button>;
}

export default LoginButton;
LogViewer.js

import React from "react";

function LogViewer({ user }) {
  return <div>Welcome, {user.metadata.name}! Logs will appear here.</div>;
}

export default LogViewer;
Dependencies
Install dependencies:

npm install react react-dom
Step 3: Containerization

Backend Dockerfile
FROM python:3.9-slim

WORKDIR /app

COPY . .

RUN pip install --no-cache-dir -r requirements.txt

EXPOSE 8000

CMD ["uvicorn", "app:app", "--host", "0.0.0.0", "--port", "8000"]
Frontend Dockerfile
FROM node:16-alpine

WORKDIR /app

COPY package*.json ./

RUN npm install

COPY . .

RUN npm run build

CMD ["npx", "serve", "build"]
Step 4: OpenShift Deployment

1. Build and Push Images
docker build -t <registry>/<namespace>/logs-downloader-backend:latest ./backend
docker build -t <registry>/<namespace>/logs-downloader-frontend:latest ./frontend

docker push <registry>/<namespace>/logs-downloader-backend:latest
docker push <registry>/<namespace>/logs-downloader-frontend:latest
2. Deploy in OpenShift
ConfigMap

apiVersion: v1
kind: ConfigMap
metadata:
  name: logs-downloader-config
data:
  OAUTH_CLIENT_ID: logs-downloader-app
  OAUTH_CLIENT_SECRET: logs-downloader-secret
  REDIRECT_URI: https://<your-route>/callback
  OPENSHIFT_CLUSTER: <your-openshift-cluster>
Backend Deployment

apiVersion: apps/v1
kind: Deployment
metadata:
  name: logs-downloader-backend
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: logs-downloader-backend
    spec:
      containers:
      - name: backend
        image: <registry>/<namespace>/logs-downloader-backend:latest
        envFrom:
        - configMapRef:
            name: logs-downloader-config
Frontend Deployment

apiVersion: apps/v1
kind: Deployment
metadata:
  name: logs-downloader-frontend
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: logs-downloader-frontend
    spec:
      containers:
      - name: frontend
        image: <registry>/<namespace>/logs-downloader-frontend:latest
Service and Route

apiVersion: v1
kind: Service
metadata:
  name: logs-downloader
spec:
  selector:
    app: logs-downloader-backend
  ports:
    - port: 8000
apiVersion: route.openshift.io/v1
kind: Route
metadata:
  name: logs-downloader
spec:
  to:
    kind: Service
    name: logs-downloader
  tls:
    termination: edge
Apply Resources
oc apply -f configmap.yaml
oc apply -f backend-deployment.yaml
oc apply -f frontend-deployment.yaml
oc apply -f service.yaml
oc apply -f route.yaml
Test the App
Access the app URL from the Route.
Verify OAuth login and RBAC functionality.
Debug issues using oc logs.
Let me know if you need further assistance!


========================
front end

{
  "name": "logs-downloader-frontend",
  "version": "1.0.0",
  "private": true,
  "dependencies": {
    "react": "^18.2.0",
    "react-dom": "^18.2.0"
  },
  "scripts": {
    "start": "react-scripts start",
    "build": "react-scripts build",
    "test": "react-scripts test",
    "eject": "react-scripts eject"
  },
  "devDependencies": {}
}

2. index.html in public/

The main HTML file that React will inject into.

public/index.html:

<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Logs Downloader App</title>
  </head>
  <body>
    <div id="root"></div>
  </body>
</html>
3. index.js

Entry point for the React application.

src/index.js:

import React from "react";
import ReactDOM from "react-dom";
import App from "./App";

ReactDOM.render(<App />, document.getElementById("root"));
4. Frontend Dockerfile

To include dependencies (react, react-dom), run the npm install command during the container build process.

frontend/Dockerfile:

# Use an official Node.js image as the base
FROM node:16-alpine

# Set the working directory
WORKDIR /app

# Copy package.json and package-lock.json
COPY package.json ./

# Install dependencies
RUN npm install

# Copy the rest of the application code
COPY . .

# Build the React app for production
RUN npm run build

# Serve the app using a simple static file server
RUN npm install -g serve
CMD ["serve", "-s", "build"]

# Expose the port
EXPOSE 3000
Frontend Setup Instructions
Initialize Frontend Project:
Inside the frontend folder, add the files described above (package.json, src, and public directories).
Build Frontend Docker Image:
Run the following command in the frontend directory where the Dockerfile exists:
docker build -t <registry>/<namespace>/logs-downloader-frontend:latest .
Push Frontend Image to Registry:
docker push <registry>/<namespace>/logs-downloader-frontend:latest
Backend and Frontend Deployment Recap
Now that the frontend Dockerfile and dependencies are properly set up:

Build and push both backend and frontend Docker images.
Backend:
docker build -t <registry>/<namespace>/logs-downloader-backend:latest ./backend
docker push <registry>/<namespace>/logs-downloader-backend:latest
Frontend:
docker build -t <registry>/<namespace>/logs-downloader-frontend:latest ./frontend
docker push <registry>/<namespace>/logs-downloader-frontend:latest
Deploy the backend and frontend in OpenShift:
Use the backend deployment YAML from the previous instructions.
Use the frontend deployment YAML below.
Frontend Deployment YAML

apiVersion: apps/v1
kind: Deployment
metadata:
  name: logs-downloader-frontend
spec:
  replicas: 1
  selector:
    matchLabels:
      app: logs-downloader-frontend
  template:
    metadata:
      labels:
        app: logs-downloader-frontend
    spec:
      containers:
      - name: logs-downloader-frontend
        image: <registry>/<namespace>/logs-downloader-frontend:latest
        ports:
        - containerPort: 3000
Frontend Service and Route YAML

apiVersion: v1
kind: Service
metadata:
  name: logs-downloader-frontend
spec:
  selector:
    app: logs-downloader-frontend
  ports:
    - port: 80
      targetPort: 3000
apiVersion: route.openshift.io/v1
kind: Route
metadata:
  name: logs-downloader-frontend
spec:
  to:
    kind: Service
    name: logs-downloader-frontend
  tls:
    termination: edge
Test the Deployment
Apply all resources:
oc apply -f configmap.yaml
oc apply -f backend-deployment.yaml
oc apply -f frontend-deployment.yaml
oc apply -f service.yaml
oc apply -f route.yaml
Access the frontend via the Route created for logs-downloader-frontend.
Verify OAuth functionality and the app's behavior.


=========================================================

package.json for Backend
{
  "name": "logs-downloader-backend",
  "version": "1.0.0",
  "description": "OAuth-integrated backend for Logs Downloader App",
  "main": "app.js",
  "scripts": {
    "start": "node app.js"
  },
  "dependencies": {
    "express": "^4.18.2",
    "dotenv": "^16.0.3",
    "authlib": "^1.1.0",
    "axios": "^1.3.0"
  },
  "author": "Your Name",
  "license": "ISC"
}
app.js Example Code (Node.js)
Here’s how you can replicate the FastAPI backend functionality using Node.js and Express.js:

const express = require("express");
const axios = require("axios");
const dotenv = require("dotenv");

dotenv.config();

const app = express();
const PORT = process.env.PORT || 8000;

const OAUTH_CLIENT_ID = process.env.OAUTH_CLIENT_ID;
const OAUTH_CLIENT_SECRET = process.env.OAUTH_CLIENT_SECRET;
const REDIRECT_URI = process.env.REDIRECT_URI;
const OPENSHIFT_CLUSTER = process.env.OPENSHIFT_CLUSTER;

let userSessions = {};

// Home route
app.get("/", (req, res) => {
  res.json({ message: "Welcome to the Logs Downloader App! Authenticate to proceed." });
});

// OAuth login route
app.get("/login", (req, res) => {
  const oauthUrl = `https://${OPENSHIFT_CLUSTER}/oauth/authorize?client_id=${OAUTH_CLIENT_ID}&response_type=code&redirect_uri=${REDIRECT_URI}`;
  res.redirect(oauthUrl);
});

// Callback route for OAuth
app.get("/callback", async (req, res) => {
  const authCode = req.query.code;

  try {
    // Exchange code for access token
    const tokenResponse = await axios.post(
      `https://${OPENSHIFT_CLUSTER}/oauth/token`,
      {
        grant_type: "authorization_code",
        code: authCode,
        redirect_uri: REDIRECT_URI,
        client_id: OAUTH_CLIENT_ID,
        client_secret: OAUTH_CLIENT_SECRET,
      }
    );

    const accessToken = tokenResponse.data.access_token;

    // Get user info
    const userResponse = await axios.get(
      `https://${OPENSHIFT_CLUSTER}/apis/user.openshift.io/v1/users/~`,
      {
        headers: { Authorization: `Bearer ${accessToken}` },
      }
    );

    const userInfo = userResponse.data;
    userSessions[userInfo.metadata.name] = { token: accessToken, info: userInfo };

    res.json({ message: "Login successful", user: userInfo });
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

// Logs route (protected)
app.get("/logs", (req, res) => {
  const authHeader = req.headers.authorization;

  if (!authHeader) {
    return res.status(401).json({ error: "Unauthorized" });
  }

  const token = authHeader.split(" ")[1];
  const user = Object.values(userSessions).find(session => session.token === token);

  if (!user) {
    return res.status(403).json({ error: "Forbidden" });
  }

  // RBAC logic
  const roles = user.info.groups || [];
  if (!roles.includes("admin") && !roles.includes("developer")) {
    return res.status(403).json({ error: "Access denied: insufficient permissions" });
  }

  res.json({ logs: "Your logs here", user: user.info.metadata.name });
});

app.listen(PORT, () => {
  console.log(`Backend running on http://localhost:${PORT}`);
});
Backend Dockerfile (Node.js)
# Use an official Node.js runtime as the base image
FROM node:16-alpine

# Set the working directory
WORKDIR /app

# Copy package.json and package-lock.json
COPY package.json ./

# Install dependencies
RUN npm install

# Copy the rest of the application code
COPY . .

# Expose the application port
EXPOSE 8000

# Command to run the application
CMD ["npm", "start"]
Environment Variables in .env
Same as FastAPI:

OAUTH_CLIENT_ID=logs-downloader-app
OAUTH_CLIENT_SECRET=logs-downloader-secret
REDIRECT_URI=https://<your-app-route>/callback
OPENSHIFT_CLUSTER=<your-openshift-cluster>
Node.js Backend Deployment Steps
Build Docker Image:
docker build -t <registry>/<namespace>/logs-downloader-backend:latest ./backend
Push to Container Registry:
docker push <registry>/<namespace>/logs-downloader-backend:latest
Deploy in OpenShift: Use the backend deployment YAML provided in previous steps.
