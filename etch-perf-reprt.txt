
apiVersion: v1
kind: ConfigMap
metadata:
  name: etcd-machineconfig
  namespace: openshift-etcd
data:
  98-var-lib-etcd.yaml: |
    apiVersion: machineconfiguration.openshift.io/v1
    kind: MachineConfig
    metadata:
      labels:
        machineconfiguration.openshift.io/role: master
      name: 98-var-lib-etcd

          if [[ ! -f /etc/machineconfig/98-var-lib-etcd.yaml ]]; then
            log_error "MachineConfig file not found in ConfigMap mount"
            exit 1
          fi

          log_info "Applying MachineConfig from ConfigMap..."
          oc apply -f /etc/machineconfig/98-var-lib-etcd.yaml || { log_error "Failed to apply MachineConfig"; exit 1; }
          log_info "PASS - MachineConfig applied"
          
          log_section "Monitoring MachineConfig Rollout"
          log_warn "This may take 15-30 minutes per node"



#!/bin/bash
set -euo pipefail

# Color codes
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

# Configuration
RESULTS_DIR="$HOME/etcd_benchmark_$(date +%Y%m%d_%H%M%S)"
FIO_SIZE="1G"
FIO_RUNTIME=60
FIO_JOBS=4
FIO_TIMEOUT=300  # 5 minutes timeout per test

# Create results directory
mkdir -p "$RESULTS_DIR"
log_file="$RESULTS_DIR/etcd_benchmark.log"

# Logging functions
log() {
  local level=$1
  shift
  local color
  local level_upper
  level_upper=$(echo "$level" | tr '[:lower:]' '[:upper:]')
  
  case "$level" in
    info) color="$GREEN" ;;
    warn) color="$YELLOW" ;;
    error) color="$RED" ;;
    *) color="$NC" ;;
  esac

  local timestamp
  timestamp=$(date '+%Y-%m-%d %H:%M:%S')
  local message="[$timestamp] $level_upper: $*"
  
  echo -e "${color}${message}${NC}" | tee -a "$log_file"
}

log_info() {
  log info "$@"
}

log_warn() {
  log warn "$@"
}

log_error() {
  log error "$@"
}

log_section() {
  echo -e "\n${BLUE}===== $* =====${NC}" | tee -a "$log_file"
}

# Check prerequisites
check_prerequisites() {
  log_section "Checking Prerequisites"
  
  if ! command -v oc &> /dev/null; then
    log_error "OpenShift CLI (oc) is not installed or not in PATH"
    exit 1
  fi
  
  if ! oc whoami &> /dev/null; then
    log_error "Not logged into OpenShift cluster. Please run 'oc login' first."
    exit 1
  fi
  
  if ! oc auth can-i '*' '*' --all-namespaces &> /dev/null; then
    log_warn "User does not have cluster-admin privileges. Some checks may fail."
  fi

  if ! command -v jq &> /dev/null; then
    log_warn "jq is not installed. Installing jq is recommended for better results parsing."
  fi
  
  log_info "Prerequisites check completed"
}

# Run FIO test on node with detailed debugging
run_fio_test() {
  local node=$1
  local test_name=$2
  local fio_params=$3
  
  local result_file="$RESULTS_DIR/fio_${node//\//_}_${test_name}.json"
  local debug_file="$RESULTS_DIR/fio_${node//\//_}_${test_name}_debug.log"
  
  log_info "Starting FIO test '$test_name' on $node"
  
  {
    echo "=== FIO Test Debug Information ==="
    echo "Test: $test_name"
    echo "Node: $node"
    echo "Timestamp: $(date)"
    echo "Command: fio $fio_params"
    echo "================================="
    echo
  } > "$debug_file"

  # Run the test
  local output
  set +e
  output=$(oc debug "node/$node" --quiet -- chroot /host bash <<'EOFSCRIPT'
set -x
echo "=== System Information ==="
hostname
uname -a
df -h /var/tmp
echo "========================="

# Check if fio is installed
if ! command -v fio &> /dev/null; then
  echo "Installing fio..."
  if command -v dnf &> /dev/null; then
    dnf install -y fio 2>&1 || yum install -y fio 2>&1
  elif command -v yum &> /dev/null; then
    yum install -y fio 2>&1
  else
    echo "ERROR: No package manager found"
    exit 1
  fi
fi

# Verify fio is now available
if ! command -v fio &> /dev/null; then
  echo "ERROR: Failed to install fio"
  exit 1
fi

# Create test directory
test_dir="/var/tmp/fio_test_$$"
mkdir -p "$test_dir"
cd "$test_dir"

# Create test file
test_file="$test_dir/testfile"
echo "Creating test file: $test_file"

if fallocate -l 2G "$test_file" 2>/dev/null; then
  echo "Test file created with fallocate"
elif dd if=/dev/zero of="$test_file" bs=1M count=2048 2>&1; then
  echo "Test file created with dd"
else
  echo "ERROR: Failed to create test file"
  cd /
  rm -rf "$test_dir"
  exit 1
fi

# Verify file exists
ls -lh "$test_file"

# Run FIO test
echo "Running FIO test..."
echo "=== FIO OUTPUT START ==="
EOFSCRIPT
)

  # Add the fio command
  output="${output}$(oc debug "node/$node" --quiet -- chroot /host bash -c "
    test_dir=\"/var/tmp/fio_test_\$\$\"
    test_file=\"\$test_dir/testfile\"
    cd \$test_dir 2>/dev/null || exit 1
    fio --filename=\$test_file --output-format=json $fio_params 2>&1
    fio_exit=\$?
    echo \"=== FIO OUTPUT END ===\"
    echo \"FIO exit code: \$fio_exit\"
    cd /
    rm -rf \$test_dir
    exit \$fio_exit
  " 2>&1)"
  
  local exit_code=$?
  set -e
  
  # Save debug output
  echo "$output" >> "$debug_file"
  
  # Try to extract JSON
  local json_start json_end json_output
  json_start=$(echo "$output" | grep -n "=== FIO OUTPUT START ===" | cut -d: -f1)
  json_end=$(echo "$output" | grep -n "=== FIO OUTPUT END ===" | cut -d: -f1)
  
  if [ -n "$json_start" ] && [ -n "$json_end" ]; then
    json_output=$(echo "$output" | sed -n "$((json_start + 1)),$((json_end - 1))p")
    
    # Validate and save JSON
    if echo "$json_output" | jq empty 2>/dev/null; then
      echo "$json_output" > "$result_file"
      
      # Parse results
      local iops lat
      iops=$(echo "$json_output" | jq -r '.jobs[0].write.iops // 0' 2>/dev/null || echo "0")
      lat=$(echo "$json_output" | jq -r '.jobs[0].write.lat_ns.mean // 0' 2>/dev/null || echo "0")
      lat=$(awk "BEGIN {printf \"%.2f\", $lat/1000000}" 2>/dev/null || echo "0.00")
      
      log_info "Test '$test_name' completed - IOPS: $iops, Latency: ${lat}ms"
      return 0
    fi
  fi
  
  log_warn "Test '$test_name' on $node may have failed or produced invalid output. Check $debug_file"
  return 1
}

# Collect etcd metrics
collect_etcd_metrics() {
  log_section "Collecting etcd Metrics"
  local metrics_file="$RESULTS_DIR/etcd_metrics.txt"
  if oc get --raw /metrics > "$metrics_file" 2>/dev/null; then
    log_info "Collected etcd metrics to $metrics_file"
  else
    log_warn "Failed to collect etcd metrics"
  fi
}

# Collect etcd status
collect_etcd_status() {
  log_section "Collecting etcd Status"
  local status_file="$RESULTS_DIR/etcd_status.log"
  
  local etcd_pod
  etcd_pod=$(oc get pods -n openshift-etcd -l app=etcd -o name 2>/dev/null | head -1)
  
  if [ -z "$etcd_pod" ]; then
    log_warn "No etcd pods found"
    return 1
  fi
  
  {
    echo "=== etcdctl member list ==="
    oc rsh -n openshift-etcd "$etcd_pod" etcdctl member list -w table 2>&1 || echo "Failed to get member list"
    
    echo -e "\n=== etcdctl endpoint status ==="
    oc rsh -n openshift-etcd "$etcd_pod" etcdctl endpoint status -w table --cluster 2>&1 || echo "Failed to get endpoint status"
    
    echo -e "\n=== etcdctl endpoint health ==="
    oc rsh -n openshift-etcd "$etcd_pod" etcdctl endpoint health --cluster 2>&1 || echo "Failed to get endpoint health"
  } > "$status_file"
  
  log_info "etcd status saved to $status_file"
}

# Generate summary report
generate_summary() {
  log_section "Generating Summary Report"
  local summary_file="$RESULTS_DIR/summary.txt"
  local start_time=$1
  local end_time
  end_time=$(date +%s)
  local duration=$((end_time - start_time))
  
  {
    echo "=== etcd Performance Benchmark Summary ==="
    echo "Date: $(date)"
    echo "OpenShift Version: $(oc version -o json 2>/dev/null | jq -r '.serverVersion.gitVersion' 2>/dev/null || echo "Unknown")"
    echo "Test Duration: $((duration / 60)) minutes $((duration % 60)) seconds"
    echo "Results Directory: $RESULTS_DIR"
    echo "========================================"
    echo
    
    echo "=== Disk Performance Results ==="
    if command -v jq &> /dev/null; then
      find "$RESULTS_DIR" -name "fio_*.json" 2>/dev/null | sort | while read -r f; do
        local node_test
        node_test=$(basename "$f" .json | sed 's/fio_//')
        local iops lat
        iops=$(jq -r '.jobs[0].write.iops // 0' "$f" 2>/dev/null || echo "0")
        lat=$(jq -r '.jobs[0].write.lat_ns.mean // 0' "$f" 2>/dev/null || echo "0")
        lat=$(awk "BEGIN {printf \"%.2f\", $lat/1000000}" 2>/dev/null || echo "0.00")
        
        printf "%-50s: IOPS=%10.2f, Latency=%8.2fms\n" "$node_test" "$iops" "$lat"
      done
    else
      echo "jq not available - check individual JSON files for results"
      find "$RESULTS_DIR" -name "fio_*.json" 2>/dev/null | sort
    fi
    
    echo
    echo "=== etcd Cluster Status ==="
    if [ -f "$RESULTS_DIR/etcd_status.log" ]; then
      cat "$RESULTS_DIR/etcd_status.log"
    else
      echo "Status information not available"
    fi
  } > "$summary_file"
  
  log_info "Benchmark completed!"
  log_info "Summary: $summary_file"
  log_info "Full logs: $log_file"
  
  # Display summary
  echo
  cat "$summary_file"
}

# Main function
main() {
  local start_time
  start_time=$(date +%s)
  
  log_section "Starting etcd Performance Benchmark"
  log_info "Results directory: $RESULTS_DIR"
  
  check_prerequisites
  
  # Get etcd nodes
  log_section "Discovering etcd Nodes"
  local etcd_nodes
  etcd_nodes=$(oc get nodes -l node-role.kubernetes.io/master= -o jsonpath='{range .items[*]}{.metadata.name}{"\n"}{end}' 2>/dev/null)
  
  if [ -z "$etcd_nodes" ]; then
    log_error "No etcd nodes found"
    exit 1
  fi
  
  log_info "Found etcd nodes:"
  echo "$etcd_nodes" | while read -r node; do
    log_info "  - $node"
  done
  
  # Run FIO tests on each etcd node
  log_section "Running Disk Performance Tests"
  for node in $etcd_nodes; do
    log_info "Testing node: $node"
    
    # Sequential write test
    run_fio_test "$node" "seq_write" "\
      --name=seq_write \
      --size=$FIO_SIZE \
      --runtime=$FIO_RUNTIME \
      --ioengine=sync \
      --rw=write \
      --bs=4k \
      --numjobs=1 \
      --time_based \
      --direct=1 \
      --group_reporting" || log_warn "seq_write test had issues on $node"
    
    # Random write test
    run_fio_test "$node" "rand_write" "\
      --name=rand_write \
      --size=$FIO_SIZE \
      --runtime=$FIO_RUNTIME \
      --ioengine=libaio \
      --rw=randwrite \
      --bs=4k \
      --numjobs=$FIO_JOBS \
      --time_based \
      --direct=1 \
      --group_reporting" || log_warn "rand_write test had issues on $node"
    
    # Fsync test
    run_fio_test "$node" "fsync" "\
      --name=fsync \
      --size=1G \
      --filesize=1G \
      --ioengine=sync \
      --rw=write \
      --bs=4k \
      --numjobs=1 \
      --fsync=1 \
      --time_based \
      --runtime=30 \
      --direct=1 \
      --group_reporting" || log_warn "fsync test had issues on $node"
  done
  
  # Collect additional diagnostics
  collect_etcd_metrics
  collect_etcd_status
  
  # Generate final report
  generate_summary "$start_time"
}

# Run main function
main "$@"
